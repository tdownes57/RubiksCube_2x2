
 We are studying the front half of a 2x2 Rubik's Cube:   (The [. .] faces are _side_ faces.)    

            //
            // Clock position:
            //
            //          [.N.]   [.N.]
            //   [.W.] [10:30] [1:30]  [.E.]
            //   [.W.]  [ 7:30] [3:30]  [.E.]
            //           [.S.]   [.S.]
            //
            // (The [. .] faces are _side_ faces.) 
            //


             [.N.]   [.N.]
   [.W.] [front] [front]  [.E.]
   [.W.] [front] [front]  [.E.]
              [.S.]   [.S.]
  
   (The [. .] faces are _side_ faces.) 

              [.N.]   [.N.]
   [.W.] [10:30] [1:30]  [.E.]
   [.W.]  [ 7:30] [3:30]  [.E.]
               [.S.]   [.S.]

                (The [. .] faces are _side_ faces.) 

        //
        // Colors must be expressed in partial-alphabetical order,
        //    i.e. as follows.
        //    
        //  Color #1 must be the lowest (closest to A)
        //    alphabetically: 
        //         blue, green, orange, red, yellow  
        //  (Face #1 is the face of the Rubik's piece which 
        //     corresponds to Color #1.)
        //
        //  Color #2 must be the color of the face which is 
        //     the first face from Face #1, when moving in a 
        //     clockwise direction. 
        //  (Face #2 is the face of the Rubik's piece which 
        //     corresponds to Color #2.)
        //     
        //  Color #3 must be the color of the face which is 
        //     the first face after Face #2, when moving in a 
        //     clockwise direction. 
        //  (Face #3 is the face of the Rubik's piece which 
        //     corresponds to Color #3.)
        //     



                //
                // Front Face is ___Blue____
                //
                if (Color.Blue == par_frontfacecolor) // Blue
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace_Enum.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face3;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face2;
                            break;

                    }


                //
                // Front Face is ___Yellow____
                //
                if (Color.Yellow == par_frontfacecolor) // Yellow 
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace_Enum.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face1;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            break;

                    }


                //
                // Front Face is ___Red____
                //
                if (Color.Red == par_frontfacecolor)  // Red
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty()):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace_Enum.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face2;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            break;

                    }


                                  //
                // Take care of the side faces. 
                //
                if (Color.Blue == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace1(par_enum);
                if (Color.Yellow == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace2(par_enum);
                if (Color.Red == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace3(par_enum);




                                //
                // Step #1:  Parse the input string into two(2) parts.  
                //
                string[] separator1 = new string[] { "==" };
                string[] parsed_array_step1 = par_strBriefDescription.Split(separator1, StringSplitOptions.RemoveEmptyEntries);

                //
                //Examples:  BOY/SW, BYR/NE   
                //
                string strColorsAndClockPosition = parsed_array_step1[0];
                string strBOY_slash = strColorsAndClockPosition.Substring(0, "BOY/".Length);
                string strNE_SE_SW_NW = strColorsAndClockPosition.Substring("BOY/".Length, 2);

                //
                // Step #2:  Parse the 90-degree revolutionary position on the front face of the Rubik's Cube
                //
                switch (strNE_SE_SW_NW)
                {
                    case ("NE"): base.FrontClockFacePosition = FrontClockFace.one_thirty(); break;
                    case ("SE"): base.FrontClockFacePosition = FrontClockFace.four_thirty(); break;
                    case ("SW"): base.FrontClockFacePosition = FrontClockFace_Enum.seven_thirty; break; 
                    case ("NW"): base.FrontClockFacePosition = FrontClockFace.ten_thirty; break; 
                    default: throw new NotImplementedException("Should be NE or SE or SW or NW.");
                }

                //
                // Step # 3: Parse the 120-degree rotation of the piece, about the corner
                //            (vs. position on the front face of the Rubik's Cube).
                //
                // Example #1:
                //
                //     F1:N_F2:E_F3:F  
                //
                // Example #2:
                //
                //     F1:S_F2:W_F3:F
                //
                //     (F = Front Face) 
                //
                string strFaceDeterminations = parsed_array_step1[1];

                char[] separator_underscore = new char[] { '_' };
                string[] parsed_array_step3 = strFaceDeterminations.Split(separator_underscore, StringSplitOptions.RemoveEmptyEntries);

                //Check that the string array has three(3) items, 
                //  corresponding to three(3) faces. ---11/20/2020 td
                if (parsed_array_step3.Length != 3) 
                    throw new NotImplementedException("There must be three substrings, F1:_, F2:_, and F3:_.");

                if (parsed_array_step3[0].StartsWith("F1") == false) throw new NotImplementedException("The 1st substring must start with F1.");
                if (parsed_array_step3[1].StartsWith("F2") == false) throw new NotImplementedException("The 2nd substring must start with F2.");
                if (parsed_array_step3[2].StartsWith("F3") == false) throw new NotImplementedException("The 3rd substring must start with F3.");

                //Set default values. 
                base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;

                //Face #1 of 3
                string strFace1_NESW = parsed_array_step3[1-1].Substring("F1:".Length);
                if (strFace1_NESW == "N") base.WhichFaceIsN_of_front = EnumFaceNum.Face1;
                if (strFace1_NESW == "E") base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                if (strFace1_NESW == "S") base.WhichFaceIsS_of_front = EnumFaceNum.Face1;
                if (strFace1_NESW == "W") base.WhichFaceIsW_of_front = EnumFaceNum.Face1;
                if (strFace1_NESW == "F") base.WhichFaceIsFront = EnumFaceNum.Face1;  // F = Front face. 

                //Face #2 of 3
                string strFace2_NESW = parsed_array_step3[2-1].Substring("F2:".Length);
                if (strFace2_NESW == "N") base.WhichFaceIsN_of_front = EnumFaceNum.Face2;
                if (strFace2_NESW == "E") base.WhichFaceIsE_of_front = EnumFaceNum.Face2;
                if (strFace2_NESW == "S") base.WhichFaceIsS_of_front = EnumFaceNum.Face2;
                if (strFace2_NESW == "W") base.WhichFaceIsW_of_front = EnumFaceNum.Face2;
                if (strFace2_NESW == "F") base.WhichFaceIsFront = EnumFaceNum.Face2;  // F = Front face. 

                string strFace3_NESW = parsed_array_step3[3-1].Substring("F1:".Length);
                if (strFace3_NESW == "N") base.WhichFaceIsN_of_front = EnumFaceNum.Face3;
                if (strFace3_NESW == "E") base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                if (strFace3_NESW == "S") base.WhichFaceIsS_of_front = EnumFaceNum.Face3;
                if (strFace3_NESW == "W") base.WhichFaceIsW_of_front = EnumFaceNum.Face3;
                if (strFace3_NESW == "F") base.WhichFaceIsFront = EnumFaceNum.Face3;  // F = Front face. 



                                //switch (_pieceBOY.FrontClockFacePosition)
                //{
                //    case FrontClockFace.one_thirty():
                //        // BOY 1:30 pm
                //        // BOY is at 1:30 am, so let's check BYR is at 10:30 p.m.
                //        //----if (_pieceBYR.FrontClockFacePosition == FrontClockFace.four_thirty()) return true;
                //        if (_pieceBYR.FrontClockFacePosition == FrontClockFace.ten_thirty) return true;
                //        break;

                //    case FrontClockFace.four_thirty():
                //        // BOY 4:30 pm
                //        // BOY is at 4:30 pm, so let's check BYR is at 1:30 p.m.
                //        if (_pieceBYR.FrontClockFacePosition == FrontClockFace.one_thirty()) return true;
                //        break;

                //    case FrontClockFace_Enum.seven_thirty:
                //        // BOY 7:30 pm.
                //        // BOY is at 7:30 pm, so let's check BYR is at 4:30 p.m.
                //        if (_pieceBYR.FrontClockFacePosition == FrontClockFace.four_thirty()) return true;
                //        break;

                //    case FrontClockFace.ten_thirty:
                //        // BOY 10:30 pm
                //        // BOY is at 10:30 pm, so let's check BYR is at 7:30 p.m.
                //        if (_pieceBYR.FrontClockFacePosition == FrontClockFace_Enum.seven_thirty) return true;
                //        break;

                //    default:
                //        return false; 
                //}

                //return false;  


    //
    //  Serialization of maneuver, one side only:
    //
    //       [Current location of originally-1:30 piece's front face, e.g. SE or SE-S], 
    //         [Current location of originally-4:30 piece's front face, e.g. NE or NE-N], 
    //           [Current location of originally-7:30 piece's front face, e.g. SW or SW-W], 
    //              [Current location of originally-10:30 piece's front face, e.g. NW or NW-E] 
    //
    // Examples of serialization-of-maneuver, one side only: 
    //
    //       NE-N, SE, SW-S, NW-W      The originally-1:30 piece's front face is now NE-N (north side face of the NE position)
    //       SW-W, SE-S, NE-N, NW-W     The originally-1:30 piece's front face is now SW-W (west side face of the SW position)
    //       NE-N, NW-W, SW-S, SE-E     The originally-1:30 piece's front face is now NE-N (north side face of the NE position)
    //       SE-E, NW, SW-W, NW-W     The originally-1:30 piece's front face is now SE-E (east side face of the SE position)
    //
    //  ---10/11/2021 thomas c. downes
    //
