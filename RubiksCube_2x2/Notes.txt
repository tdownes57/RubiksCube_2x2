
 We are studying the front half of a 2x2 Rubik's Cube:   (The [. .] faces are _side_ faces.)    

            //
            // Clock position:
            //
            //          [.N.]   [.N.]
            //   [.W.] [10:30] [1:30]  [.E.]
            //   [.W.]  [ 7:30] [3:30]  [.E.]
            //           [.S.]   [.S.]
            //
            // (The [. .] faces are _side_ faces.) 
            //


             [.N.]   [.N.]
   [.W.] [front] [front]  [.E.]
   [.W.] [front] [front]  [.E.]
              [.S.]   [.S.]
  
   (The [. .] faces are _side_ faces.) 

              [.N.]   [.N.]
   [.W.] [10:30] [1:30]  [.E.]
   [.W.]  [ 7:30] [3:30]  [.E.]
               [.S.]   [.S.]

                (The [. .] faces are _side_ faces.) 

        //
        // Colors must be expressed in partial-alphabetical order,
        //    i.e. as follows.
        //    
        //  Color #1 must be the lowest (closest to A)
        //    alphabetically: 
        //         blue, green, orange, red, yellow  
        //  (Face #1 is the face of the Rubik's piece which 
        //     corresponds to Color #1.)
        //
        //  Color #2 must be the color of the face which is 
        //     the first face from Face #1, when moving in a 
        //     clockwise direction. 
        //  (Face #2 is the face of the Rubik's piece which 
        //     corresponds to Color #2.)
        //     
        //  Color #3 must be the color of the face which is 
        //     the first face after Face #2, when moving in a 
        //     clockwise direction. 
        //  (Face #3 is the face of the Rubik's piece which 
        //     corresponds to Color #3.)
        //     



                //
                // Front Face is ___Blue____
                //
                if (Color.Blue == par_frontfacecolor) // Blue
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face3;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face2;
                            break;

                    }


                //
                // Front Face is ___Yellow____
                //
                if (Color.Yellow == par_frontfacecolor) // Yellow 
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face3;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face1;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face3;
                            break;

                    }


                //
                // Front Face is ___Red____
                //
                if (Color.Red == par_frontfacecolor)  // Red
                    switch (par_enum)
                    {
                        case (FrontClockFace.one_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.four_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            break;

                        case (FrontClockFace.seven_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsS_of_front = EnumFaceNum.Face1;
                            base.WhichFaceIsW_of_front = EnumFaceNum.Face2;
                            break;

                        case (FrontClockFace.ten_thirty):
                            base.WhichFaceIsN_of_front = EnumFaceNum.Face2;
                            base.WhichFaceIsS_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsW_of_front = EnumFaceNum.NotApplicable_DifferentPiece;
                            base.WhichFaceIsE_of_front = EnumFaceNum.Face1;
                            break;

                    }


                                  //
                // Take care of the side faces. 
                //
                if (Color.Blue == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace1(par_enum);
                if (Color.Yellow == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace2(par_enum);
                if (Color.Red == par_frontfacecolor) base.ReorientPiece_FrontFaceIsFace3(par_enum);


